// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataType.proto

#ifndef PROTOBUF_DataType_2eproto__INCLUDED
#define PROTOBUF_DataType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataType_2eproto();
void protobuf_AssignDesc_DataType_2eproto();
void protobuf_ShutdownFile_DataType_2eproto();

class DataType;

enum DataType_Format {
  DataType_Format_FORMAT_HALF_PRECISION_FLOAT = 1,
  DataType_Format_FORMAT_SINGLE_PRECISION_FLOAT = 2,
  DataType_Format_FORMAT_DOUBLE_PRECISION_FLOAT = 3,
  DataType_Format_FORMAT_SIGNED_BYTE = 4,
  DataType_Format_FORMAT_UNSIGNED_BYTE = 5,
  DataType_Format_FORMAT_SIGNED_SHORT = 6,
  DataType_Format_FORMAT_UNSIGNED_SHORT = 7,
  DataType_Format_FORMAT_SIGNED_INT = 8,
  DataType_Format_FORMAT_UNSIGNED_INT = 9
};
bool DataType_Format_IsValid(int value);
const DataType_Format DataType_Format_Format_MIN = DataType_Format_FORMAT_HALF_PRECISION_FLOAT;
const DataType_Format DataType_Format_Format_MAX = DataType_Format_FORMAT_UNSIGNED_INT;
const int DataType_Format_Format_ARRAYSIZE = DataType_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_Format_descriptor();
inline const ::std::string& DataType_Format_Name(DataType_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_Format_descriptor(), value);
}
inline bool DataType_Format_Parse(
    const ::std::string& name, DataType_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType_Format>(
    DataType_Format_descriptor(), name, value);
}
enum DataType_Interpretation {
  DataType_Interpretation_INTERPRET_FLOAT = 1,
  DataType_Interpretation_INTERPRET_NORM_FLOAT = 2,
  DataType_Interpretation_INTERPRET_INT = 3,
  DataType_Interpretation_INTERPRET_DOUBLE = 4
};
bool DataType_Interpretation_IsValid(int value);
const DataType_Interpretation DataType_Interpretation_Interpretation_MIN = DataType_Interpretation_INTERPRET_FLOAT;
const DataType_Interpretation DataType_Interpretation_Interpretation_MAX = DataType_Interpretation_INTERPRET_DOUBLE;
const int DataType_Interpretation_Interpretation_ARRAYSIZE = DataType_Interpretation_Interpretation_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_Interpretation_descriptor();
inline const ::std::string& DataType_Interpretation_Name(DataType_Interpretation value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_Interpretation_descriptor(), value);
}
inline bool DataType_Interpretation_Parse(
    const ::std::string& name, DataType_Interpretation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType_Interpretation>(
    DataType_Interpretation_descriptor(), name, value);
}
// ===================================================================

class DataType : public ::google::protobuf::Message {
 public:
  DataType();
  virtual ~DataType();

  DataType(const DataType& from);

  inline DataType& operator=(const DataType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataType& default_instance();

  void Swap(DataType* other);

  // implements Message ----------------------------------------------

  DataType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataType& from);
  void MergeFrom(const DataType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataType_Format Format;
  static const Format FORMAT_HALF_PRECISION_FLOAT = DataType_Format_FORMAT_HALF_PRECISION_FLOAT;
  static const Format FORMAT_SINGLE_PRECISION_FLOAT = DataType_Format_FORMAT_SINGLE_PRECISION_FLOAT;
  static const Format FORMAT_DOUBLE_PRECISION_FLOAT = DataType_Format_FORMAT_DOUBLE_PRECISION_FLOAT;
  static const Format FORMAT_SIGNED_BYTE = DataType_Format_FORMAT_SIGNED_BYTE;
  static const Format FORMAT_UNSIGNED_BYTE = DataType_Format_FORMAT_UNSIGNED_BYTE;
  static const Format FORMAT_SIGNED_SHORT = DataType_Format_FORMAT_SIGNED_SHORT;
  static const Format FORMAT_UNSIGNED_SHORT = DataType_Format_FORMAT_UNSIGNED_SHORT;
  static const Format FORMAT_SIGNED_INT = DataType_Format_FORMAT_SIGNED_INT;
  static const Format FORMAT_UNSIGNED_INT = DataType_Format_FORMAT_UNSIGNED_INT;
  static inline bool Format_IsValid(int value) {
    return DataType_Format_IsValid(value);
  }
  static const Format Format_MIN =
    DataType_Format_Format_MIN;
  static const Format Format_MAX =
    DataType_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    DataType_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return DataType_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return DataType_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return DataType_Format_Parse(name, value);
  }

  typedef DataType_Interpretation Interpretation;
  static const Interpretation INTERPRET_FLOAT = DataType_Interpretation_INTERPRET_FLOAT;
  static const Interpretation INTERPRET_NORM_FLOAT = DataType_Interpretation_INTERPRET_NORM_FLOAT;
  static const Interpretation INTERPRET_INT = DataType_Interpretation_INTERPRET_INT;
  static const Interpretation INTERPRET_DOUBLE = DataType_Interpretation_INTERPRET_DOUBLE;
  static inline bool Interpretation_IsValid(int value) {
    return DataType_Interpretation_IsValid(value);
  }
  static const Interpretation Interpretation_MIN =
    DataType_Interpretation_Interpretation_MIN;
  static const Interpretation Interpretation_MAX =
    DataType_Interpretation_Interpretation_MAX;
  static const int Interpretation_ARRAYSIZE =
    DataType_Interpretation_Interpretation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Interpretation_descriptor() {
    return DataType_Interpretation_descriptor();
  }
  static inline const ::std::string& Interpretation_Name(Interpretation value) {
    return DataType_Interpretation_Name(value);
  }
  static inline bool Interpretation_Parse(const ::std::string& name,
      Interpretation* value) {
    return DataType_Interpretation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .protobuf.DataType.Format format = 1;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 1;
  inline ::protobuf::DataType_Format format() const;
  inline void set_format(::protobuf::DataType_Format value);

  // required .protobuf.DataType.Interpretation interpretation = 2;
  inline bool has_interpretation() const;
  inline void clear_interpretation();
  static const int kInterpretationFieldNumber = 2;
  inline ::protobuf::DataType_Interpretation interpretation() const;
  inline void set_interpretation(::protobuf::DataType_Interpretation value);

  // required uint32 repeats = 3;
  inline bool has_repeats() const;
  inline void clear_repeats();
  static const int kRepeatsFieldNumber = 3;
  inline ::google::protobuf::uint32 repeats() const;
  inline void set_repeats(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protobuf.DataType)
 private:
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_interpretation();
  inline void clear_has_interpretation();
  inline void set_has_repeats();
  inline void clear_has_repeats();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int format_;
  int interpretation_;
  ::std::string* name_;
  ::google::protobuf::uint32 repeats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DataType_2eproto();
  friend void protobuf_AssignDesc_DataType_2eproto();
  friend void protobuf_ShutdownFile_DataType_2eproto();

  void InitAsDefaultInstance();
  static DataType* default_instance_;
};
// ===================================================================


// ===================================================================

// DataType

// required .protobuf.DataType.Format format = 1;
inline bool DataType::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataType::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataType::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataType::clear_format() {
  format_ = 1;
  clear_has_format();
}
inline ::protobuf::DataType_Format DataType::format() const {
  return static_cast< ::protobuf::DataType_Format >(format_);
}
inline void DataType::set_format(::protobuf::DataType_Format value) {
  assert(::protobuf::DataType_Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// required .protobuf.DataType.Interpretation interpretation = 2;
inline bool DataType::has_interpretation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataType::set_has_interpretation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataType::clear_has_interpretation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataType::clear_interpretation() {
  interpretation_ = 1;
  clear_has_interpretation();
}
inline ::protobuf::DataType_Interpretation DataType::interpretation() const {
  return static_cast< ::protobuf::DataType_Interpretation >(interpretation_);
}
inline void DataType::set_interpretation(::protobuf::DataType_Interpretation value) {
  assert(::protobuf::DataType_Interpretation_IsValid(value));
  set_has_interpretation();
  interpretation_ = value;
}

// required uint32 repeats = 3;
inline bool DataType::has_repeats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataType::set_has_repeats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataType::clear_has_repeats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataType::clear_repeats() {
  repeats_ = 0u;
  clear_has_repeats();
}
inline ::google::protobuf::uint32 DataType::repeats() const {
  return repeats_;
}
inline void DataType::set_repeats(::google::protobuf::uint32 value) {
  set_has_repeats();
  repeats_ = value;
}

// optional string name = 5;
inline bool DataType::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataType::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataType::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataType::name() const {
  return *name_;
}
inline void DataType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DataType_Format>() {
  return ::protobuf::DataType_Format_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::DataType_Interpretation>() {
  return ::protobuf::DataType_Interpretation_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataType_2eproto__INCLUDED
