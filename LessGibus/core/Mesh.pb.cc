// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mesh.proto

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif
#include "Mesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_Vertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_Triangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_Triangle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mesh_2eproto() {
  protobuf_AddDesc_Mesh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mesh.proto");
  GOOGLE_CHECK(file != NULL);
  Mesh_descriptor_ = file->message_type(0);
  static const int Mesh_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, deprecated_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, skeleton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, triangles_),
  };
  Mesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::default_instance_,
      Mesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mesh));
  Mesh_Vertex_descriptor_ = Mesh_descriptor_->nested_type(0);
  static const int Mesh_Vertex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, texcoord_),
  };
  Mesh_Vertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mesh_Vertex_descriptor_,
      Mesh_Vertex::default_instance_,
      Mesh_Vertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Vertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mesh_Vertex));
  Mesh_Triangle_descriptor_ = Mesh_descriptor_->nested_type(1);
  static const int Mesh_Triangle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Triangle, vert1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Triangle, vert2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Triangle, vert3_),
  };
  Mesh_Triangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mesh_Triangle_descriptor_,
      Mesh_Triangle::default_instance_,
      Mesh_Triangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Triangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh_Triangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mesh_Triangle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mesh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mesh_descriptor_, &Mesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mesh_Vertex_descriptor_, &Mesh_Vertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mesh_Triangle_descriptor_, &Mesh_Triangle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mesh_2eproto() {
  delete Mesh::default_instance_;
  delete Mesh_reflection_;
  delete Mesh_Vertex::default_instance_;
  delete Mesh_Vertex_reflection_;
  delete Mesh_Triangle::default_instance_;
  delete Mesh_Triangle_reflection_;
}

void protobuf_AddDesc_Mesh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_Skeleton_2eproto();
  ::protobuf::protobuf_AddDesc_Types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMesh.proto\022\010protobuf\032\016Skeleton.proto\032\013"
    "Types.proto\"\302\002\n\004Mesh\022\033\n\023DEPRECATED_mater"
    "ial\030\001 \001(\t\022\'\n\010vertices\030\002 \003(\0132\025.protobuf.M"
    "esh.Vertex\022!\n\010skeleton\030\003 \001(\0132\017.protobuf."
    "Joint\022*\n\ttriangles\030\004 \003(\0132\027.protobuf.Mesh"
    ".Triangle\032l\n\006Vertex\022 \n\010position\030\001 \001(\0132\016."
    "protobuf.vec3\022\036\n\006normal\030\002 \001(\0132\016.protobuf"
    ".vec3\022 \n\010texcoord\030\003 \001(\0132\016.protobuf.vec3\032"
    "7\n\010Triangle\022\r\n\005vert1\030\001 \002(\r\022\r\n\005vert2\030\002 \002("
    "\r\022\r\n\005vert3\030\003 \002(\r", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mesh.proto", &protobuf_RegisterTypes);
  Mesh::default_instance_ = new Mesh();
  Mesh_Vertex::default_instance_ = new Mesh_Vertex();
  Mesh_Triangle::default_instance_ = new Mesh_Triangle();
  Mesh::default_instance_->InitAsDefaultInstance();
  Mesh_Vertex::default_instance_->InitAsDefaultInstance();
  Mesh_Triangle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mesh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mesh_2eproto {
  StaticDescriptorInitializer_Mesh_2eproto() {
    protobuf_AddDesc_Mesh_2eproto();
  }
} static_descriptor_initializer_Mesh_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mesh_Vertex::kPositionFieldNumber;
const int Mesh_Vertex::kNormalFieldNumber;
const int Mesh_Vertex::kTexcoordFieldNumber;
#endif  // !_MSC_VER

Mesh_Vertex::Mesh_Vertex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mesh_Vertex::InitAsDefaultInstance() {
  position_ = const_cast< ::protobuf::vec3*>(&::protobuf::vec3::default_instance());
  normal_ = const_cast< ::protobuf::vec3*>(&::protobuf::vec3::default_instance());
  texcoord_ = const_cast< ::protobuf::vec3*>(&::protobuf::vec3::default_instance());
}

Mesh_Vertex::Mesh_Vertex(const Mesh_Vertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mesh_Vertex::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  normal_ = NULL;
  texcoord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh_Vertex::~Mesh_Vertex() {
  SharedDtor();
}

void Mesh_Vertex::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete normal_;
    delete texcoord_;
  }
}

void Mesh_Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_Vertex_descriptor_;
}

const Mesh_Vertex& Mesh_Vertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mesh_2eproto();
  return *default_instance_;
}

Mesh_Vertex* Mesh_Vertex::default_instance_ = NULL;

Mesh_Vertex* Mesh_Vertex::New() const {
  return new Mesh_Vertex;
}

void Mesh_Vertex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::protobuf::vec3::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::protobuf::vec3::Clear();
    }
    if (has_texcoord()) {
      if (texcoord_ != NULL) texcoord_->::protobuf::vec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mesh_Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.vec3 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // optional .protobuf.vec3 normal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_texcoord;
        break;
      }

      // optional .protobuf.vec3 texcoord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texcoord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texcoord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mesh_Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.vec3 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .protobuf.vec3 normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normal(), output);
  }

  // optional .protobuf.vec3 texcoord = 3;
  if (has_texcoord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->texcoord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mesh_Vertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.vec3 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .protobuf.vec3 normal = 2;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normal(), target);
  }

  // optional .protobuf.vec3 texcoord = 3;
  if (has_texcoord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->texcoord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mesh_Vertex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.vec3 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .protobuf.vec3 normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // optional .protobuf.vec3 texcoord = 3;
    if (has_texcoord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texcoord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Vertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mesh_Vertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mesh_Vertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mesh_Vertex::MergeFrom(const Mesh_Vertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::protobuf::vec3::MergeFrom(from.position());
    }
    if (from.has_normal()) {
      mutable_normal()->::protobuf::vec3::MergeFrom(from.normal());
    }
    if (from.has_texcoord()) {
      mutable_texcoord()->::protobuf::vec3::MergeFrom(from.texcoord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mesh_Vertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Vertex::CopyFrom(const Mesh_Vertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh_Vertex::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_normal()) {
    if (!this->normal().IsInitialized()) return false;
  }
  if (has_texcoord()) {
    if (!this->texcoord().IsInitialized()) return false;
  }
  return true;
}

void Mesh_Vertex::Swap(Mesh_Vertex* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(normal_, other->normal_);
    std::swap(texcoord_, other->texcoord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mesh_Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_Vertex_descriptor_;
  metadata.reflection = Mesh_Vertex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Mesh_Triangle::kVert1FieldNumber;
const int Mesh_Triangle::kVert2FieldNumber;
const int Mesh_Triangle::kVert3FieldNumber;
#endif  // !_MSC_VER

Mesh_Triangle::Mesh_Triangle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mesh_Triangle::InitAsDefaultInstance() {
}

Mesh_Triangle::Mesh_Triangle(const Mesh_Triangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mesh_Triangle::SharedCtor() {
  _cached_size_ = 0;
  vert1_ = 0u;
  vert2_ = 0u;
  vert3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh_Triangle::~Mesh_Triangle() {
  SharedDtor();
}

void Mesh_Triangle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mesh_Triangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh_Triangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_Triangle_descriptor_;
}

const Mesh_Triangle& Mesh_Triangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mesh_2eproto();
  return *default_instance_;
}

Mesh_Triangle* Mesh_Triangle::default_instance_ = NULL;

Mesh_Triangle* Mesh_Triangle::New() const {
  return new Mesh_Triangle;
}

void Mesh_Triangle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vert1_ = 0u;
    vert2_ = 0u;
    vert3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mesh_Triangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vert1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vert1_)));
          set_has_vert1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vert2;
        break;
      }

      // required uint32 vert2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vert2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vert2_)));
          set_has_vert2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vert3;
        break;
      }

      // required uint32 vert3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vert3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vert3_)));
          set_has_vert3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mesh_Triangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 vert1 = 1;
  if (has_vert1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vert1(), output);
  }

  // required uint32 vert2 = 2;
  if (has_vert2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->vert2(), output);
  }

  // required uint32 vert3 = 3;
  if (has_vert3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vert3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mesh_Triangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 vert1 = 1;
  if (has_vert1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vert1(), target);
  }

  // required uint32 vert2 = 2;
  if (has_vert2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->vert2(), target);
  }

  // required uint32 vert3 = 3;
  if (has_vert3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vert3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mesh_Triangle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 vert1 = 1;
    if (has_vert1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vert1());
    }

    // required uint32 vert2 = 2;
    if (has_vert2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vert2());
    }

    // required uint32 vert3 = 3;
    if (has_vert3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vert3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh_Triangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mesh_Triangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mesh_Triangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mesh_Triangle::MergeFrom(const Mesh_Triangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vert1()) {
      set_vert1(from.vert1());
    }
    if (from.has_vert2()) {
      set_vert2(from.vert2());
    }
    if (from.has_vert3()) {
      set_vert3(from.vert3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mesh_Triangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh_Triangle::CopyFrom(const Mesh_Triangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh_Triangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Mesh_Triangle::Swap(Mesh_Triangle* other) {
  if (other != this) {
    std::swap(vert1_, other->vert1_);
    std::swap(vert2_, other->vert2_);
    std::swap(vert3_, other->vert3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mesh_Triangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_Triangle_descriptor_;
  metadata.reflection = Mesh_Triangle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Mesh::kDEPRECATEDMaterialFieldNumber;
const int Mesh::kVerticesFieldNumber;
const int Mesh::kSkeletonFieldNumber;
const int Mesh::kTrianglesFieldNumber;
#endif  // !_MSC_VER

Mesh::Mesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mesh::InitAsDefaultInstance() {
  skeleton_ = const_cast< ::protobuf::Joint*>(&::protobuf::Joint::default_instance());
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mesh::SharedCtor() {
  _cached_size_ = 0;
  deprecated_material_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skeleton_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh::~Mesh() {
  SharedDtor();
}

void Mesh::SharedDtor() {
  if (deprecated_material_ != &::google::protobuf::internal::kEmptyString) {
    delete deprecated_material_;
  }
  if (this != default_instance_) {
    delete skeleton_;
  }
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mesh_2eproto();
  return *default_instance_;
}

Mesh* Mesh::default_instance_ = NULL;

Mesh* Mesh::New() const {
  return new Mesh;
}

void Mesh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deprecated_material()) {
      if (deprecated_material_ != &::google::protobuf::internal::kEmptyString) {
        deprecated_material_->clear();
      }
    }
    if (has_skeleton()) {
      if (skeleton_ != NULL) skeleton_->::protobuf::Joint::Clear();
    }
  }
  vertices_.Clear();
  triangles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_material = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deprecated_material().data(), this->deprecated_material().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        break;
      }

      // repeated .protobuf.Mesh.Vertex vertices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vertices;
        if (input->ExpectTag(26)) goto parse_skeleton;
        break;
      }

      // optional .protobuf.Joint skeleton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skeleton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skeleton()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_triangles;
        break;
      }

      // repeated .protobuf.Mesh.Triangle triangles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triangles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triangles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_triangles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string DEPRECATED_material = 1;
  if (has_deprecated_material()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_material().data(), this->deprecated_material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->deprecated_material(), output);
  }

  // repeated .protobuf.Mesh.Vertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertices(i), output);
  }

  // optional .protobuf.Joint skeleton = 3;
  if (has_skeleton()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skeleton(), output);
  }

  // repeated .protobuf.Mesh.Triangle triangles = 4;
  for (int i = 0; i < this->triangles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->triangles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string DEPRECATED_material = 1;
  if (has_deprecated_material()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deprecated_material().data(), this->deprecated_material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_material(), target);
  }

  // repeated .protobuf.Mesh.Vertex vertices = 2;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertices(i), target);
  }

  // optional .protobuf.Joint skeleton = 3;
  if (has_skeleton()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skeleton(), target);
  }

  // repeated .protobuf.Mesh.Triangle triangles = 4;
  for (int i = 0; i < this->triangles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->triangles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string DEPRECATED_material = 1;
    if (has_deprecated_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_material());
    }

    // optional .protobuf.Joint skeleton = 3;
    if (has_skeleton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skeleton());
    }

  }
  // repeated .protobuf.Mesh.Vertex vertices = 2;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .protobuf.Mesh.Triangle triangles = 4;
  total_size += 1 * this->triangles_size();
  for (int i = 0; i < this->triangles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triangles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  triangles_.MergeFrom(from.triangles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_material()) {
      set_deprecated_material(from.deprecated_material());
    }
    if (from.has_skeleton()) {
      mutable_skeleton()->::protobuf::Joint::MergeFrom(from.skeleton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {

  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < triangles_size(); i++) {
    if (!this->triangles(i).IsInitialized()) return false;
  }
  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other != this) {
    std::swap(deprecated_material_, other->deprecated_material_);
    vertices_.Swap(&other->vertices_);
    std::swap(skeleton_, other->skeleton_);
    triangles_.Swap(&other->triangles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
