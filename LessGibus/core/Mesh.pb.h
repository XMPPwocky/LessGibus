// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mesh.proto

#ifndef PROTOBUF_Mesh_2eproto__INCLUDED
#define PROTOBUF_Mesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Declarations.pb.h"
#include "Skeleton.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Mesh_2eproto();
void protobuf_AssignDesc_Mesh_2eproto();
void protobuf_ShutdownFile_Mesh_2eproto();

class Triangle;
class Mesh;

// ===================================================================

class Triangle : public ::google::protobuf::Message {
 public:
  Triangle();
  virtual ~Triangle();

  Triangle(const Triangle& from);

  inline Triangle& operator=(const Triangle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Triangle& default_instance();

  void Swap(Triangle* other);

  // implements Message ----------------------------------------------

  Triangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Triangle& from);
  void MergeFrom(const Triangle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 vert1 = 1;
  inline bool has_vert1() const;
  inline void clear_vert1();
  static const int kVert1FieldNumber = 1;
  inline ::google::protobuf::uint32 vert1() const;
  inline void set_vert1(::google::protobuf::uint32 value);

  // required uint32 vert2 = 2;
  inline bool has_vert2() const;
  inline void clear_vert2();
  static const int kVert2FieldNumber = 2;
  inline ::google::protobuf::uint32 vert2() const;
  inline void set_vert2(::google::protobuf::uint32 value);

  // required uint32 vert3 = 3;
  inline bool has_vert3() const;
  inline void clear_vert3();
  static const int kVert3FieldNumber = 3;
  inline ::google::protobuf::uint32 vert3() const;
  inline void set_vert3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf.Triangle)
 private:
  inline void set_has_vert1();
  inline void clear_has_vert1();
  inline void set_has_vert2();
  inline void clear_has_vert2();
  inline void set_has_vert3();
  inline void clear_has_vert3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 vert1_;
  ::google::protobuf::uint32 vert2_;
  ::google::protobuf::uint32 vert3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Mesh_2eproto();
  friend void protobuf_AssignDesc_Mesh_2eproto();
  friend void protobuf_ShutdownFile_Mesh_2eproto();

  void InitAsDefaultInstance();
  static Triangle* default_instance_;
};
// -------------------------------------------------------------------

class Mesh : public ::google::protobuf::Message {
 public:
  Mesh();
  virtual ~Mesh();

  Mesh(const Mesh& from);

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh& default_instance();

  void Swap(Mesh* other);

  // implements Message ----------------------------------------------

  Mesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mesh& from);
  void MergeFrom(const Mesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string material_path = 1;
  inline bool has_material_path() const;
  inline void clear_material_path();
  static const int kMaterialPathFieldNumber = 1;
  inline const ::std::string& material_path() const;
  inline void set_material_path(const ::std::string& value);
  inline void set_material_path(const char* value);
  inline void set_material_path(const char* value, size_t size);
  inline ::std::string* mutable_material_path();
  inline ::std::string* release_material_path();
  inline void set_allocated_material_path(::std::string* material_path);

  // required .protobuf.VertexDeclaration vertices_format = 3;
  inline bool has_vertices_format() const;
  inline void clear_vertices_format();
  static const int kVerticesFormatFieldNumber = 3;
  inline const ::protobuf::VertexDeclaration& vertices_format() const;
  inline ::protobuf::VertexDeclaration* mutable_vertices_format();
  inline ::protobuf::VertexDeclaration* release_vertices_format();
  inline void set_allocated_vertices_format(::protobuf::VertexDeclaration* vertices_format);

  // required bytes vertices_data = 4;
  inline bool has_vertices_data() const;
  inline void clear_vertices_data();
  static const int kVerticesDataFieldNumber = 4;
  inline const ::std::string& vertices_data() const;
  inline void set_vertices_data(const ::std::string& value);
  inline void set_vertices_data(const char* value);
  inline void set_vertices_data(const void* value, size_t size);
  inline ::std::string* mutable_vertices_data();
  inline ::std::string* release_vertices_data();
  inline void set_allocated_vertices_data(::std::string* vertices_data);

  // required .protobuf.Joint skeleton = 5;
  inline bool has_skeleton() const;
  inline void clear_skeleton();
  static const int kSkeletonFieldNumber = 5;
  inline const ::protobuf::Joint& skeleton() const;
  inline ::protobuf::Joint* mutable_skeleton();
  inline ::protobuf::Joint* release_skeleton();
  inline void set_allocated_skeleton(::protobuf::Joint* skeleton);

  // repeated .protobuf.Triangle triangles = 6;
  inline int triangles_size() const;
  inline void clear_triangles();
  static const int kTrianglesFieldNumber = 6;
  inline const ::protobuf::Triangle& triangles(int index) const;
  inline ::protobuf::Triangle* mutable_triangles(int index);
  inline ::protobuf::Triangle* add_triangles();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Triangle >&
      triangles() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::Triangle >*
      mutable_triangles();

  // @@protoc_insertion_point(class_scope:protobuf.Mesh)
 private:
  inline void set_has_material_path();
  inline void clear_has_material_path();
  inline void set_has_vertices_format();
  inline void clear_has_vertices_format();
  inline void set_has_vertices_data();
  inline void clear_has_vertices_data();
  inline void set_has_skeleton();
  inline void clear_has_skeleton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* material_path_;
  ::protobuf::VertexDeclaration* vertices_format_;
  ::std::string* vertices_data_;
  ::protobuf::Joint* skeleton_;
  ::google::protobuf::RepeatedPtrField< ::protobuf::Triangle > triangles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Mesh_2eproto();
  friend void protobuf_AssignDesc_Mesh_2eproto();
  friend void protobuf_ShutdownFile_Mesh_2eproto();

  void InitAsDefaultInstance();
  static Mesh* default_instance_;
};
// ===================================================================


// ===================================================================

// Triangle

// required uint32 vert1 = 1;
inline bool Triangle::has_vert1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Triangle::set_has_vert1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Triangle::clear_has_vert1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Triangle::clear_vert1() {
  vert1_ = 0u;
  clear_has_vert1();
}
inline ::google::protobuf::uint32 Triangle::vert1() const {
  return vert1_;
}
inline void Triangle::set_vert1(::google::protobuf::uint32 value) {
  set_has_vert1();
  vert1_ = value;
}

// required uint32 vert2 = 2;
inline bool Triangle::has_vert2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Triangle::set_has_vert2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Triangle::clear_has_vert2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Triangle::clear_vert2() {
  vert2_ = 0u;
  clear_has_vert2();
}
inline ::google::protobuf::uint32 Triangle::vert2() const {
  return vert2_;
}
inline void Triangle::set_vert2(::google::protobuf::uint32 value) {
  set_has_vert2();
  vert2_ = value;
}

// required uint32 vert3 = 3;
inline bool Triangle::has_vert3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Triangle::set_has_vert3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Triangle::clear_has_vert3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Triangle::clear_vert3() {
  vert3_ = 0u;
  clear_has_vert3();
}
inline ::google::protobuf::uint32 Triangle::vert3() const {
  return vert3_;
}
inline void Triangle::set_vert3(::google::protobuf::uint32 value) {
  set_has_vert3();
  vert3_ = value;
}

// -------------------------------------------------------------------

// Mesh

// required string material_path = 1;
inline bool Mesh::has_material_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mesh::set_has_material_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mesh::clear_has_material_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mesh::clear_material_path() {
  if (material_path_ != &::google::protobuf::internal::kEmptyString) {
    material_path_->clear();
  }
  clear_has_material_path();
}
inline const ::std::string& Mesh::material_path() const {
  return *material_path_;
}
inline void Mesh::set_material_path(const ::std::string& value) {
  set_has_material_path();
  if (material_path_ == &::google::protobuf::internal::kEmptyString) {
    material_path_ = new ::std::string;
  }
  material_path_->assign(value);
}
inline void Mesh::set_material_path(const char* value) {
  set_has_material_path();
  if (material_path_ == &::google::protobuf::internal::kEmptyString) {
    material_path_ = new ::std::string;
  }
  material_path_->assign(value);
}
inline void Mesh::set_material_path(const char* value, size_t size) {
  set_has_material_path();
  if (material_path_ == &::google::protobuf::internal::kEmptyString) {
    material_path_ = new ::std::string;
  }
  material_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesh::mutable_material_path() {
  set_has_material_path();
  if (material_path_ == &::google::protobuf::internal::kEmptyString) {
    material_path_ = new ::std::string;
  }
  return material_path_;
}
inline ::std::string* Mesh::release_material_path() {
  clear_has_material_path();
  if (material_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = material_path_;
    material_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mesh::set_allocated_material_path(::std::string* material_path) {
  if (material_path_ != &::google::protobuf::internal::kEmptyString) {
    delete material_path_;
  }
  if (material_path) {
    set_has_material_path();
    material_path_ = material_path;
  } else {
    clear_has_material_path();
    material_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .protobuf.VertexDeclaration vertices_format = 3;
inline bool Mesh::has_vertices_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mesh::set_has_vertices_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mesh::clear_has_vertices_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mesh::clear_vertices_format() {
  if (vertices_format_ != NULL) vertices_format_->::protobuf::VertexDeclaration::Clear();
  clear_has_vertices_format();
}
inline const ::protobuf::VertexDeclaration& Mesh::vertices_format() const {
  return vertices_format_ != NULL ? *vertices_format_ : *default_instance_->vertices_format_;
}
inline ::protobuf::VertexDeclaration* Mesh::mutable_vertices_format() {
  set_has_vertices_format();
  if (vertices_format_ == NULL) vertices_format_ = new ::protobuf::VertexDeclaration;
  return vertices_format_;
}
inline ::protobuf::VertexDeclaration* Mesh::release_vertices_format() {
  clear_has_vertices_format();
  ::protobuf::VertexDeclaration* temp = vertices_format_;
  vertices_format_ = NULL;
  return temp;
}
inline void Mesh::set_allocated_vertices_format(::protobuf::VertexDeclaration* vertices_format) {
  delete vertices_format_;
  vertices_format_ = vertices_format;
  if (vertices_format) {
    set_has_vertices_format();
  } else {
    clear_has_vertices_format();
  }
}

// required bytes vertices_data = 4;
inline bool Mesh::has_vertices_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mesh::set_has_vertices_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mesh::clear_has_vertices_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mesh::clear_vertices_data() {
  if (vertices_data_ != &::google::protobuf::internal::kEmptyString) {
    vertices_data_->clear();
  }
  clear_has_vertices_data();
}
inline const ::std::string& Mesh::vertices_data() const {
  return *vertices_data_;
}
inline void Mesh::set_vertices_data(const ::std::string& value) {
  set_has_vertices_data();
  if (vertices_data_ == &::google::protobuf::internal::kEmptyString) {
    vertices_data_ = new ::std::string;
  }
  vertices_data_->assign(value);
}
inline void Mesh::set_vertices_data(const char* value) {
  set_has_vertices_data();
  if (vertices_data_ == &::google::protobuf::internal::kEmptyString) {
    vertices_data_ = new ::std::string;
  }
  vertices_data_->assign(value);
}
inline void Mesh::set_vertices_data(const void* value, size_t size) {
  set_has_vertices_data();
  if (vertices_data_ == &::google::protobuf::internal::kEmptyString) {
    vertices_data_ = new ::std::string;
  }
  vertices_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mesh::mutable_vertices_data() {
  set_has_vertices_data();
  if (vertices_data_ == &::google::protobuf::internal::kEmptyString) {
    vertices_data_ = new ::std::string;
  }
  return vertices_data_;
}
inline ::std::string* Mesh::release_vertices_data() {
  clear_has_vertices_data();
  if (vertices_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vertices_data_;
    vertices_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mesh::set_allocated_vertices_data(::std::string* vertices_data) {
  if (vertices_data_ != &::google::protobuf::internal::kEmptyString) {
    delete vertices_data_;
  }
  if (vertices_data) {
    set_has_vertices_data();
    vertices_data_ = vertices_data;
  } else {
    clear_has_vertices_data();
    vertices_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .protobuf.Joint skeleton = 5;
inline bool Mesh::has_skeleton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mesh::set_has_skeleton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mesh::clear_has_skeleton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mesh::clear_skeleton() {
  if (skeleton_ != NULL) skeleton_->::protobuf::Joint::Clear();
  clear_has_skeleton();
}
inline const ::protobuf::Joint& Mesh::skeleton() const {
  return skeleton_ != NULL ? *skeleton_ : *default_instance_->skeleton_;
}
inline ::protobuf::Joint* Mesh::mutable_skeleton() {
  set_has_skeleton();
  if (skeleton_ == NULL) skeleton_ = new ::protobuf::Joint;
  return skeleton_;
}
inline ::protobuf::Joint* Mesh::release_skeleton() {
  clear_has_skeleton();
  ::protobuf::Joint* temp = skeleton_;
  skeleton_ = NULL;
  return temp;
}
inline void Mesh::set_allocated_skeleton(::protobuf::Joint* skeleton) {
  delete skeleton_;
  skeleton_ = skeleton;
  if (skeleton) {
    set_has_skeleton();
  } else {
    clear_has_skeleton();
  }
}

// repeated .protobuf.Triangle triangles = 6;
inline int Mesh::triangles_size() const {
  return triangles_.size();
}
inline void Mesh::clear_triangles() {
  triangles_.Clear();
}
inline const ::protobuf::Triangle& Mesh::triangles(int index) const {
  return triangles_.Get(index);
}
inline ::protobuf::Triangle* Mesh::mutable_triangles(int index) {
  return triangles_.Mutable(index);
}
inline ::protobuf::Triangle* Mesh::add_triangles() {
  return triangles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::Triangle >&
Mesh::triangles() const {
  return triangles_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::Triangle >*
Mesh::mutable_triangles() {
  return &triangles_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Mesh_2eproto__INCLUDED
