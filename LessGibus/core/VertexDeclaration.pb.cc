// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VertexDeclaration.proto

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif
#include "VertexDeclaration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* VertexDeclaration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VertexDeclaration_reflection_ = NULL;
const ::google::protobuf::Descriptor* VertexDeclaration_Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VertexDeclaration_Component_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VertexDeclaration_Component_Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VertexDeclaration_Component_Interpretation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_VertexDeclaration_2eproto() {
  protobuf_AddDesc_VertexDeclaration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VertexDeclaration.proto");
  GOOGLE_CHECK(file != NULL);
  VertexDeclaration_descriptor_ = file->message_type(0);
  static const int VertexDeclaration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration, components_),
  };
  VertexDeclaration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VertexDeclaration_descriptor_,
      VertexDeclaration::default_instance_,
      VertexDeclaration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VertexDeclaration));
  VertexDeclaration_Component_descriptor_ = VertexDeclaration_descriptor_->nested_type(0);
  static const int VertexDeclaration_Component_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, interpretation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, repeats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, attrib_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, name_),
  };
  VertexDeclaration_Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VertexDeclaration_Component_descriptor_,
      VertexDeclaration_Component::default_instance_,
      VertexDeclaration_Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VertexDeclaration_Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VertexDeclaration_Component));
  VertexDeclaration_Component_Format_descriptor_ = VertexDeclaration_Component_descriptor_->enum_type(0);
  VertexDeclaration_Component_Interpretation_descriptor_ = VertexDeclaration_Component_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VertexDeclaration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VertexDeclaration_descriptor_, &VertexDeclaration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VertexDeclaration_Component_descriptor_, &VertexDeclaration_Component::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VertexDeclaration_2eproto() {
  delete VertexDeclaration::default_instance_;
  delete VertexDeclaration_reflection_;
  delete VertexDeclaration_Component::default_instance_;
  delete VertexDeclaration_Component_reflection_;
}

void protobuf_AddDesc_VertexDeclaration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027VertexDeclaration.proto\022\010protobuf\"\214\005\n\021"
    "VertexDeclaration\0229\n\ncomponents\030\001 \003(\0132%."
    "protobuf.VertexDeclaration.Component\032\273\004\n"
    "\tComponent\022<\n\006format\030\001 \002(\0162,.protobuf.Ve"
    "rtexDeclaration.Component.Format\022L\n\016inte"
    "rpretation\030\002 \002(\01624.protobuf.VertexDeclar"
    "ation.Component.Interpretation\022\017\n\007repeat"
    "s\030\003 \002(\r\022\021\n\tattrib_id\030\004 \002(\r\022\014\n\004name\030\005 \001(\t"
    "\"\205\002\n\006Format\022\037\n\033FORMAT_HALF_PRECISION_FLO"
    "AT\020\001\022!\n\035FORMAT_SINGLE_PRECISION_FLOAT\020\002\022"
    "!\n\035FORMAT_DOUBLE_PRECISION_FLOAT\020\003\022\026\n\022FO"
    "RMAT_SIGNED_BYTE\020\004\022\030\n\024FORMAT_UNSIGNED_BY"
    "TE\020\005\022\027\n\023FORMAT_SIGNED_SHORT\020\006\022\031\n\025FORMAT_"
    "UNSIGNED_SHORT\020\007\022\025\n\021FORMAT_SIGNED_INT\020\010\022"
    "\027\n\023FORMAT_UNSIGNED_INT\020\t\"h\n\016Interpretati"
    "on\022\023\n\017INTERPRET_FLOAT\020\001\022\030\n\024INTERPRET_NOR"
    "M_FLOAT\020\002\022\021\n\rINTERPRET_INT\020\003\022\024\n\020INTERPRE"
    "T_DOUBLE\020\004", 690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VertexDeclaration.proto", &protobuf_RegisterTypes);
  VertexDeclaration::default_instance_ = new VertexDeclaration();
  VertexDeclaration_Component::default_instance_ = new VertexDeclaration_Component();
  VertexDeclaration::default_instance_->InitAsDefaultInstance();
  VertexDeclaration_Component::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VertexDeclaration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VertexDeclaration_2eproto {
  StaticDescriptorInitializer_VertexDeclaration_2eproto() {
    protobuf_AddDesc_VertexDeclaration_2eproto();
  }
} static_descriptor_initializer_VertexDeclaration_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* VertexDeclaration_Component_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VertexDeclaration_Component_Format_descriptor_;
}
bool VertexDeclaration_Component_Format_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_HALF_PRECISION_FLOAT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_SINGLE_PRECISION_FLOAT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_DOUBLE_PRECISION_FLOAT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_SIGNED_BYTE;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_UNSIGNED_BYTE;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_SIGNED_SHORT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_UNSIGNED_SHORT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_SIGNED_INT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::FORMAT_UNSIGNED_INT;
const VertexDeclaration_Component_Format VertexDeclaration_Component::Format_MIN;
const VertexDeclaration_Component_Format VertexDeclaration_Component::Format_MAX;
const int VertexDeclaration_Component::Format_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* VertexDeclaration_Component_Interpretation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VertexDeclaration_Component_Interpretation_descriptor_;
}
bool VertexDeclaration_Component_Interpretation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::INTERPRET_FLOAT;
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::INTERPRET_NORM_FLOAT;
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::INTERPRET_INT;
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::INTERPRET_DOUBLE;
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::Interpretation_MIN;
const VertexDeclaration_Component_Interpretation VertexDeclaration_Component::Interpretation_MAX;
const int VertexDeclaration_Component::Interpretation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VertexDeclaration_Component::kFormatFieldNumber;
const int VertexDeclaration_Component::kInterpretationFieldNumber;
const int VertexDeclaration_Component::kRepeatsFieldNumber;
const int VertexDeclaration_Component::kAttribIdFieldNumber;
const int VertexDeclaration_Component::kNameFieldNumber;
#endif  // !_MSC_VER

VertexDeclaration_Component::VertexDeclaration_Component()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VertexDeclaration_Component::InitAsDefaultInstance() {
}

VertexDeclaration_Component::VertexDeclaration_Component(const VertexDeclaration_Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VertexDeclaration_Component::SharedCtor() {
  _cached_size_ = 0;
  format_ = 1;
  interpretation_ = 1;
  repeats_ = 0u;
  attrib_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VertexDeclaration_Component::~VertexDeclaration_Component() {
  SharedDtor();
}

void VertexDeclaration_Component::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VertexDeclaration_Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VertexDeclaration_Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VertexDeclaration_Component_descriptor_;
}

const VertexDeclaration_Component& VertexDeclaration_Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VertexDeclaration_2eproto();
  return *default_instance_;
}

VertexDeclaration_Component* VertexDeclaration_Component::default_instance_ = NULL;

VertexDeclaration_Component* VertexDeclaration_Component::New() const {
  return new VertexDeclaration_Component;
}

void VertexDeclaration_Component::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 1;
    interpretation_ = 1;
    repeats_ = 0u;
    attrib_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VertexDeclaration_Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.VertexDeclaration.Component.Format format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::VertexDeclaration_Component_Format_IsValid(value)) {
            set_format(static_cast< ::protobuf::VertexDeclaration_Component_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interpretation;
        break;
      }

      // required .protobuf.VertexDeclaration.Component.Interpretation interpretation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpretation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::VertexDeclaration_Component_Interpretation_IsValid(value)) {
            set_interpretation(static_cast< ::protobuf::VertexDeclaration_Component_Interpretation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repeats;
        break;
      }

      // required uint32 repeats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeats_)));
          set_has_repeats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attrib_id;
        break;
      }

      // required uint32 attrib_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrib_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrib_id_)));
          set_has_attrib_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VertexDeclaration_Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.VertexDeclaration.Component.Format format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // required .protobuf.VertexDeclaration.Component.Interpretation interpretation = 2;
  if (has_interpretation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->interpretation(), output);
  }

  // required uint32 repeats = 3;
  if (has_repeats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->repeats(), output);
  }

  // required uint32 attrib_id = 4;
  if (has_attrib_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attrib_id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VertexDeclaration_Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.VertexDeclaration.Component.Format format = 1;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // required .protobuf.VertexDeclaration.Component.Interpretation interpretation = 2;
  if (has_interpretation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->interpretation(), target);
  }

  // required uint32 repeats = 3;
  if (has_repeats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->repeats(), target);
  }

  // required uint32 attrib_id = 4;
  if (has_attrib_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attrib_id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VertexDeclaration_Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.VertexDeclaration.Component.Format format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // required .protobuf.VertexDeclaration.Component.Interpretation interpretation = 2;
    if (has_interpretation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interpretation());
    }

    // required uint32 repeats = 3;
    if (has_repeats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeats());
    }

    // required uint32 attrib_id = 4;
    if (has_attrib_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrib_id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VertexDeclaration_Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VertexDeclaration_Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VertexDeclaration_Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VertexDeclaration_Component::MergeFrom(const VertexDeclaration_Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_interpretation()) {
      set_interpretation(from.interpretation());
    }
    if (from.has_repeats()) {
      set_repeats(from.repeats());
    }
    if (from.has_attrib_id()) {
      set_attrib_id(from.attrib_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VertexDeclaration_Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexDeclaration_Component::CopyFrom(const VertexDeclaration_Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexDeclaration_Component::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VertexDeclaration_Component::Swap(VertexDeclaration_Component* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(interpretation_, other->interpretation_);
    std::swap(repeats_, other->repeats_);
    std::swap(attrib_id_, other->attrib_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VertexDeclaration_Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VertexDeclaration_Component_descriptor_;
  metadata.reflection = VertexDeclaration_Component_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VertexDeclaration::kComponentsFieldNumber;
#endif  // !_MSC_VER

VertexDeclaration::VertexDeclaration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VertexDeclaration::InitAsDefaultInstance() {
}

VertexDeclaration::VertexDeclaration(const VertexDeclaration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VertexDeclaration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VertexDeclaration::~VertexDeclaration() {
  SharedDtor();
}

void VertexDeclaration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VertexDeclaration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VertexDeclaration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VertexDeclaration_descriptor_;
}

const VertexDeclaration& VertexDeclaration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VertexDeclaration_2eproto();
  return *default_instance_;
}

VertexDeclaration* VertexDeclaration::default_instance_ = NULL;

VertexDeclaration* VertexDeclaration::New() const {
  return new VertexDeclaration;
}

void VertexDeclaration::Clear() {
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VertexDeclaration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.VertexDeclaration.Component components = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VertexDeclaration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.VertexDeclaration.Component components = 1;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->components(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VertexDeclaration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.VertexDeclaration.Component components = 1;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->components(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VertexDeclaration::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.VertexDeclaration.Component components = 1;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VertexDeclaration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VertexDeclaration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VertexDeclaration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VertexDeclaration::MergeFrom(const VertexDeclaration& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VertexDeclaration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexDeclaration::CopyFrom(const VertexDeclaration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexDeclaration::IsInitialized() const {

  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  return true;
}

void VertexDeclaration::Swap(VertexDeclaration* other) {
  if (other != this) {
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VertexDeclaration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VertexDeclaration_descriptor_;
  metadata.reflection = VertexDeclaration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
