// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShaderProgram.proto

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif
#include "ShaderProgram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* ShaderProgram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderProgram_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShaderProgram_Shader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderProgram_Shader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShaderProgram_ShaderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShaderProgram_2eproto() {
  protobuf_AddDesc_ShaderProgram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShaderProgram.proto");
  GOOGLE_CHECK(file != NULL);
  ShaderProgram_descriptor_ = file->message_type(0);
  static const int ShaderProgram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, shaders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, vertex_format_),
  };
  ShaderProgram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderProgram_descriptor_,
      ShaderProgram::default_instance_,
      ShaderProgram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderProgram));
  ShaderProgram_Shader_descriptor_ = ShaderProgram_descriptor_->nested_type(0);
  static const int ShaderProgram_Shader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, path_),
  };
  ShaderProgram_Shader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderProgram_Shader_descriptor_,
      ShaderProgram_Shader::default_instance_,
      ShaderProgram_Shader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderProgram_Shader));
  ShaderProgram_ShaderType_descriptor_ = ShaderProgram_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShaderProgram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderProgram_descriptor_, &ShaderProgram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderProgram_Shader_descriptor_, &ShaderProgram_Shader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShaderProgram_2eproto() {
  delete ShaderProgram::default_instance_;
  delete ShaderProgram_reflection_;
  delete ShaderProgram_Shader::default_instance_;
  delete ShaderProgram_Shader_reflection_;
}

void protobuf_AddDesc_ShaderProgram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_Declarations_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ShaderProgram.proto\022\010protobuf\032\022Declara"
    "tions.proto\"\323\002\n\rShaderProgram\022/\n\007shaders"
    "\030\001 \003(\0132\036.protobuf.ShaderProgram.Shader\0222"
    "\n\rvertex_format\030\002 \002(\0132\033.protobuf.VertexD"
    "eclaration\032H\n\006Shader\0220\n\004type\030\001 \002(\0162\".pro"
    "tobuf.ShaderProgram.ShaderType\022\014\n\004path\030\002"
    " \002(\t\"\222\001\n\nShaderType\022\022\n\016COMPUTE_SHADER\020\001\022"
    "\021\n\rVERTEX_SHADER\020\002\022\027\n\023TESS_CONTROL_SHADE"
    "R\020\003\022\032\n\026TESS_EVALUATION_SHADER\020\004\022\023\n\017GEOME"
    "TRY_SHADER\020\005\022\023\n\017FRAGMENT_SHADER\020\006", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShaderProgram.proto", &protobuf_RegisterTypes);
  ShaderProgram::default_instance_ = new ShaderProgram();
  ShaderProgram_Shader::default_instance_ = new ShaderProgram_Shader();
  ShaderProgram::default_instance_->InitAsDefaultInstance();
  ShaderProgram_Shader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShaderProgram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShaderProgram_2eproto {
  StaticDescriptorInitializer_ShaderProgram_2eproto() {
    protobuf_AddDesc_ShaderProgram_2eproto();
  }
} static_descriptor_initializer_ShaderProgram_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ShaderProgram_ShaderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_ShaderType_descriptor_;
}
bool ShaderProgram_ShaderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShaderProgram_ShaderType ShaderProgram::COMPUTE_SHADER;
const ShaderProgram_ShaderType ShaderProgram::VERTEX_SHADER;
const ShaderProgram_ShaderType ShaderProgram::TESS_CONTROL_SHADER;
const ShaderProgram_ShaderType ShaderProgram::TESS_EVALUATION_SHADER;
const ShaderProgram_ShaderType ShaderProgram::GEOMETRY_SHADER;
const ShaderProgram_ShaderType ShaderProgram::FRAGMENT_SHADER;
const ShaderProgram_ShaderType ShaderProgram::ShaderType_MIN;
const ShaderProgram_ShaderType ShaderProgram::ShaderType_MAX;
const int ShaderProgram::ShaderType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShaderProgram_Shader::kTypeFieldNumber;
const int ShaderProgram_Shader::kPathFieldNumber;
#endif  // !_MSC_VER

ShaderProgram_Shader::ShaderProgram_Shader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderProgram_Shader::InitAsDefaultInstance() {
}

ShaderProgram_Shader::ShaderProgram_Shader(const ShaderProgram_Shader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderProgram_Shader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderProgram_Shader::~ShaderProgram_Shader() {
  SharedDtor();
}

void ShaderProgram_Shader::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ShaderProgram_Shader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderProgram_Shader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_Shader_descriptor_;
}

const ShaderProgram_Shader& ShaderProgram_Shader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderProgram_Shader* ShaderProgram_Shader::default_instance_ = NULL;

ShaderProgram_Shader* ShaderProgram_Shader::New() const {
  return new ShaderProgram_Shader;
}

void ShaderProgram_Shader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderProgram_Shader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.ShaderProgram.ShaderType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::ShaderProgram_ShaderType_IsValid(value)) {
            set_type(static_cast< ::protobuf::ShaderProgram_ShaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderProgram_Shader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.ShaderProgram.ShaderType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderProgram_Shader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.ShaderProgram.ShaderType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderProgram_Shader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.ShaderProgram.ShaderType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderProgram_Shader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderProgram_Shader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderProgram_Shader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderProgram_Shader::MergeFrom(const ShaderProgram_Shader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderProgram_Shader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderProgram_Shader::CopyFrom(const ShaderProgram_Shader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProgram_Shader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShaderProgram_Shader::Swap(ShaderProgram_Shader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderProgram_Shader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderProgram_Shader_descriptor_;
  metadata.reflection = ShaderProgram_Shader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShaderProgram::kShadersFieldNumber;
const int ShaderProgram::kVertexFormatFieldNumber;
#endif  // !_MSC_VER

ShaderProgram::ShaderProgram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderProgram::InitAsDefaultInstance() {
  vertex_format_ = const_cast< ::protobuf::VertexDeclaration*>(&::protobuf::VertexDeclaration::default_instance());
}

ShaderProgram::ShaderProgram(const ShaderProgram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderProgram::SharedCtor() {
  _cached_size_ = 0;
  vertex_format_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderProgram::~ShaderProgram() {
  SharedDtor();
}

void ShaderProgram::SharedDtor() {
  if (this != default_instance_) {
    delete vertex_format_;
  }
}

void ShaderProgram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderProgram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_descriptor_;
}

const ShaderProgram& ShaderProgram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderProgram* ShaderProgram::default_instance_ = NULL;

ShaderProgram* ShaderProgram::New() const {
  return new ShaderProgram;
}

void ShaderProgram::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_vertex_format()) {
      if (vertex_format_ != NULL) vertex_format_->::protobuf::VertexDeclaration::Clear();
    }
  }
  shaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderProgram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.ShaderProgram.Shader shaders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shaders;
        if (input->ExpectTag(18)) goto parse_vertex_format;
        break;
      }

      // required .protobuf.VertexDeclaration vertex_format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertex_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vertex_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderProgram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  for (int i = 0; i < this->shaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shaders(i), output);
  }

  // required .protobuf.VertexDeclaration vertex_format = 2;
  if (has_vertex_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vertex_format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderProgram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  for (int i = 0; i < this->shaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shaders(i), target);
  }

  // required .protobuf.VertexDeclaration vertex_format = 2;
  if (has_vertex_format()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vertex_format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderProgram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .protobuf.VertexDeclaration vertex_format = 2;
    if (has_vertex_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vertex_format());
    }

  }
  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  total_size += 1 * this->shaders_size();
  for (int i = 0; i < this->shaders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shaders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderProgram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderProgram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderProgram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderProgram::MergeFrom(const ShaderProgram& from) {
  GOOGLE_CHECK_NE(&from, this);
  shaders_.MergeFrom(from.shaders_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vertex_format()) {
      mutable_vertex_format()->::protobuf::VertexDeclaration::MergeFrom(from.vertex_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderProgram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderProgram::CopyFrom(const ShaderProgram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProgram::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < shaders_size(); i++) {
    if (!this->shaders(i).IsInitialized()) return false;
  }
  if (has_vertex_format()) {
    if (!this->vertex_format().IsInitialized()) return false;
  }
  return true;
}

void ShaderProgram::Swap(ShaderProgram* other) {
  if (other != this) {
    shaders_.Swap(&other->shaders_);
    std::swap(vertex_format_, other->vertex_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderProgram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderProgram_descriptor_;
  metadata.reflection = ShaderProgram_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
