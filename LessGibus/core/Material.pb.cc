// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Material.proto

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif
#include "Material.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* Material_Texture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_Texture_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Material_2eproto() {
  protobuf_AddDesc_Material_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Material.proto");
  GOOGLE_CHECK(file != NULL);
  Material_descriptor_ = file->message_type(0);
  static const int Material_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, shaderprog_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, shader_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, textures_),
  };
  Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material));
  Material_Texture_descriptor_ = Material_descriptor_->nested_type(0);
  static const int Material_Texture_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Texture, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Texture, filepath_),
  };
  Material_Texture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_Texture_descriptor_,
      Material_Texture::default_instance_,
      Material_Texture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Texture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material_Texture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material_Texture));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Material_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_Texture_descriptor_, &Material_Texture::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Material_2eproto() {
  delete Material::default_instance_;
  delete Material_reflection_;
  delete Material_Texture::default_instance_;
  delete Material_Texture_reflection_;
}

void protobuf_AddDesc_Material_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf::protobuf_AddDesc_Declarations_2eproto();
  ::protobuf::protobuf_AddDesc_DataType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Material.proto\022\010protobuf\032\022Declarations"
    ".proto\032\016DataType.proto\"\247\001\n\010Material\022\027\n\017s"
    "haderprog_path\030\001 \001(\t\022)\n\rshader_params\030\002 "
    "\003(\0132\022.protobuf.DataType\022,\n\010textures\030\003 \003("
    "\0132\032.protobuf.Material.Texture\032)\n\007Texture"
    "\022\014\n\004name\030\001 \002(\t\022\020\n\010filepath\030\002 \002(\t", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Material.proto", &protobuf_RegisterTypes);
  Material::default_instance_ = new Material();
  Material_Texture::default_instance_ = new Material_Texture();
  Material::default_instance_->InitAsDefaultInstance();
  Material_Texture::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Material_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Material_2eproto {
  StaticDescriptorInitializer_Material_2eproto() {
    protobuf_AddDesc_Material_2eproto();
  }
} static_descriptor_initializer_Material_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Material_Texture::kNameFieldNumber;
const int Material_Texture::kFilepathFieldNumber;
#endif  // !_MSC_VER

Material_Texture::Material_Texture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material_Texture::InitAsDefaultInstance() {
}

Material_Texture::Material_Texture(const Material_Texture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material_Texture::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material_Texture::~Material_Texture() {
  SharedDtor();
}

void Material_Texture::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
  }
}

void Material_Texture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material_Texture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_Texture_descriptor_;
}

const Material_Texture& Material_Texture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();
  return *default_instance_;
}

Material_Texture* Material_Texture::default_instance_ = NULL;

Material_Texture* Material_Texture::New() const {
  return new Material_Texture;
}

void Material_Texture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material_Texture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filepath;
        break;
      }

      // required string filepath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material_Texture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filepath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material_Texture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string filepath = 2;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filepath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material_Texture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string filepath = 2;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material_Texture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material_Texture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material_Texture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material_Texture::MergeFrom(const Material_Texture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material_Texture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material_Texture::CopyFrom(const Material_Texture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material_Texture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Material_Texture::Swap(Material_Texture* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(filepath_, other->filepath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material_Texture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_Texture_descriptor_;
  metadata.reflection = Material_Texture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Material::kShaderprogPathFieldNumber;
const int Material::kShaderParamsFieldNumber;
const int Material::kTexturesFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Material::InitAsDefaultInstance() {
}

Material::Material(const Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Material::SharedCtor() {
  _cached_size_ = 0;
  shaderprog_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  SharedDtor();
}

void Material::SharedDtor() {
  if (shaderprog_path_ != &::google::protobuf::internal::kEmptyString) {
    delete shaderprog_path_;
  }
  if (this != default_instance_) {
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Material_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shaderprog_path()) {
      if (shaderprog_path_ != &::google::protobuf::internal::kEmptyString) {
        shaderprog_path_->clear();
      }
    }
  }
  shader_params_.Clear();
  textures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string shaderprog_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shaderprog_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shaderprog_path().data(), this->shaderprog_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shader_params;
        break;
      }

      // repeated .protobuf.DataType shader_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shader_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shader_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shader_params;
        if (input->ExpectTag(26)) goto parse_textures;
        break;
      }

      // repeated .protobuf.Material.Texture textures = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_textures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_textures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string shaderprog_path = 1;
  if (has_shaderprog_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shaderprog_path().data(), this->shaderprog_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->shaderprog_path(), output);
  }

  // repeated .protobuf.DataType shader_params = 2;
  for (int i = 0; i < this->shader_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shader_params(i), output);
  }

  // repeated .protobuf.Material.Texture textures = 3;
  for (int i = 0; i < this->textures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->textures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string shaderprog_path = 1;
  if (has_shaderprog_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shaderprog_path().data(), this->shaderprog_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shaderprog_path(), target);
  }

  // repeated .protobuf.DataType shader_params = 2;
  for (int i = 0; i < this->shader_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shader_params(i), target);
  }

  // repeated .protobuf.Material.Texture textures = 3;
  for (int i = 0; i < this->textures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->textures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string shaderprog_path = 1;
    if (has_shaderprog_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shaderprog_path());
    }

  }
  // repeated .protobuf.DataType shader_params = 2;
  total_size += 1 * this->shader_params_size();
  for (int i = 0; i < this->shader_params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shader_params(i));
  }

  // repeated .protobuf.Material.Texture textures = 3;
  total_size += 1 * this->textures_size();
  for (int i = 0; i < this->textures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->textures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  shader_params_.MergeFrom(from.shader_params_);
  textures_.MergeFrom(from.textures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shaderprog_path()) {
      set_shaderprog_path(from.shaderprog_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {

  for (int i = 0; i < shader_params_size(); i++) {
    if (!this->shader_params(i).IsInitialized()) return false;
  }
  for (int i = 0; i < textures_size(); i++) {
    if (!this->textures(i).IsInitialized()) return false;
  }
  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    std::swap(shaderprog_path_, other->shaderprog_path_);
    shader_params_.Swap(&other->shader_params_);
    textures_.Swap(&other->textures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
