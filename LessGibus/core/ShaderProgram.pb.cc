// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShaderProgram.proto

#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#ifdef _MSC_VER
#  pragma warning(push)
#  pragma warning(disable: 4127 4244 4267)
#endif
#include "ShaderProgram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* ShaderParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShaderParamBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderParamBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShaderProgram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderProgram_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShaderProgram_Shader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShaderProgram_Shader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShaderProgram_ShaderType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShaderProgram_2eproto() {
  protobuf_AddDesc_ShaderProgram_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShaderProgram.proto");
  GOOGLE_CHECK(file != NULL);
  ShaderParam_descriptor_ = file->message_type(0);
  static const int ShaderParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParam, uniform_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParam, value_),
  };
  ShaderParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderParam_descriptor_,
      ShaderParam::default_instance_,
      ShaderParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderParam));
  ShaderParamBlock_descriptor_ = file->message_type(1);
  static const int ShaderParamBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParamBlock, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParamBlock, name_),
  };
  ShaderParamBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderParamBlock_descriptor_,
      ShaderParamBlock::default_instance_,
      ShaderParamBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParamBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderParamBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderParamBlock));
  ShaderProgram_descriptor_ = file->message_type(2);
  static const int ShaderProgram_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, shaders_),
  };
  ShaderProgram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderProgram_descriptor_,
      ShaderProgram::default_instance_,
      ShaderProgram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderProgram));
  ShaderProgram_Shader_descriptor_ = ShaderProgram_descriptor_->nested_type(0);
  static const int ShaderProgram_Shader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, path_),
  };
  ShaderProgram_Shader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShaderProgram_Shader_descriptor_,
      ShaderProgram_Shader::default_instance_,
      ShaderProgram_Shader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShaderProgram_Shader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShaderProgram_Shader));
  ShaderProgram_ShaderType_descriptor_ = ShaderProgram_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShaderProgram_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderParam_descriptor_, &ShaderParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderParamBlock_descriptor_, &ShaderParamBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderProgram_descriptor_, &ShaderProgram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShaderProgram_Shader_descriptor_, &ShaderProgram_Shader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShaderProgram_2eproto() {
  delete ShaderParam::default_instance_;
  delete ShaderParam_reflection_;
  delete ShaderParamBlock::default_instance_;
  delete ShaderParamBlock_reflection_;
  delete ShaderProgram::default_instance_;
  delete ShaderProgram_reflection_;
  delete ShaderProgram_Shader::default_instance_;
  delete ShaderProgram_Shader_reflection_;
}

void protobuf_AddDesc_ShaderProgram_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ShaderProgram.proto\022\010protobuf\"2\n\013Shade"
    "rParam\022\024\n\014uniform_name\030\001 \002(\t\022\r\n\005value\030\002 "
    "\002(\t\"G\n\020ShaderParamBlock\022%\n\006params\030\001 \003(\0132"
    "\025.protobuf.ShaderParam\022\014\n\004name\030\002 \001(\t\"\237\002\n"
    "\rShaderProgram\022/\n\007shaders\030\001 \003(\0132\036.protob"
    "uf.ShaderProgram.Shader\032H\n\006Shader\0220\n\004typ"
    "e\030\001 \002(\0162\".protobuf.ShaderProgram.ShaderT"
    "ype\022\014\n\004path\030\002 \002(\t\"\222\001\n\nShaderType\022\022\n\016COMP"
    "UTE_SHADER\020\001\022\021\n\rVERTEX_SHADER\020\002\022\027\n\023TESS_"
    "CONTROL_SHADER\020\003\022\032\n\026TESS_EVALUATION_SHAD"
    "ER\020\004\022\023\n\017GEOMETRY_SHADER\020\005\022\023\n\017FRAGMENT_SH"
    "ADER\020\006", 446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShaderProgram.proto", &protobuf_RegisterTypes);
  ShaderParam::default_instance_ = new ShaderParam();
  ShaderParamBlock::default_instance_ = new ShaderParamBlock();
  ShaderProgram::default_instance_ = new ShaderProgram();
  ShaderProgram_Shader::default_instance_ = new ShaderProgram_Shader();
  ShaderParam::default_instance_->InitAsDefaultInstance();
  ShaderParamBlock::default_instance_->InitAsDefaultInstance();
  ShaderProgram::default_instance_->InitAsDefaultInstance();
  ShaderProgram_Shader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShaderProgram_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShaderProgram_2eproto {
  StaticDescriptorInitializer_ShaderProgram_2eproto() {
    protobuf_AddDesc_ShaderProgram_2eproto();
  }
} static_descriptor_initializer_ShaderProgram_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShaderParam::kUniformNameFieldNumber;
const int ShaderParam::kValueFieldNumber;
#endif  // !_MSC_VER

ShaderParam::ShaderParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderParam::InitAsDefaultInstance() {
}

ShaderParam::ShaderParam(const ShaderParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderParam::SharedCtor() {
  _cached_size_ = 0;
  uniform_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderParam::~ShaderParam() {
  SharedDtor();
}

void ShaderParam::SharedDtor() {
  if (uniform_name_ != &::google::protobuf::internal::kEmptyString) {
    delete uniform_name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ShaderParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderParam_descriptor_;
}

const ShaderParam& ShaderParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderParam* ShaderParam::default_instance_ = NULL;

ShaderParam* ShaderParam::New() const {
  return new ShaderParam;
}

void ShaderParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniform_name()) {
      if (uniform_name_ != &::google::protobuf::internal::kEmptyString) {
        uniform_name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniform_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniform_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniform_name().data(), this->uniform_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniform_name = 1;
  if (has_uniform_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniform_name().data(), this->uniform_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uniform_name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniform_name = 1;
  if (has_uniform_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniform_name().data(), this->uniform_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uniform_name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniform_name = 1;
    if (has_uniform_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniform_name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderParam::MergeFrom(const ShaderParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniform_name()) {
      set_uniform_name(from.uniform_name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderParam::CopyFrom(const ShaderParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShaderParam::Swap(ShaderParam* other) {
  if (other != this) {
    std::swap(uniform_name_, other->uniform_name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderParam_descriptor_;
  metadata.reflection = ShaderParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShaderParamBlock::kParamsFieldNumber;
const int ShaderParamBlock::kNameFieldNumber;
#endif  // !_MSC_VER

ShaderParamBlock::ShaderParamBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderParamBlock::InitAsDefaultInstance() {
}

ShaderParamBlock::ShaderParamBlock(const ShaderParamBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderParamBlock::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderParamBlock::~ShaderParamBlock() {
  SharedDtor();
}

void ShaderParamBlock::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShaderParamBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderParamBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderParamBlock_descriptor_;
}

const ShaderParamBlock& ShaderParamBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderParamBlock* ShaderParamBlock::default_instance_ = NULL;

ShaderParamBlock* ShaderParamBlock::New() const {
  return new ShaderParamBlock;
}

void ShaderParamBlock::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderParamBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.ShaderParam params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderParamBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.ShaderParam params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderParamBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.ShaderParam params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderParamBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .protobuf.ShaderParam params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderParamBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderParamBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderParamBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderParamBlock::MergeFrom(const ShaderParamBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderParamBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderParamBlock::CopyFrom(const ShaderParamBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderParamBlock::IsInitialized() const {

  for (int i = 0; i < params_size(); i++) {
    if (!this->params(i).IsInitialized()) return false;
  }
  return true;
}

void ShaderParamBlock::Swap(ShaderParamBlock* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderParamBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderParamBlock_descriptor_;
  metadata.reflection = ShaderParamBlock_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ShaderProgram_ShaderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_ShaderType_descriptor_;
}
bool ShaderProgram_ShaderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ShaderProgram_ShaderType ShaderProgram::COMPUTE_SHADER;
const ShaderProgram_ShaderType ShaderProgram::VERTEX_SHADER;
const ShaderProgram_ShaderType ShaderProgram::TESS_CONTROL_SHADER;
const ShaderProgram_ShaderType ShaderProgram::TESS_EVALUATION_SHADER;
const ShaderProgram_ShaderType ShaderProgram::GEOMETRY_SHADER;
const ShaderProgram_ShaderType ShaderProgram::FRAGMENT_SHADER;
const ShaderProgram_ShaderType ShaderProgram::ShaderType_MIN;
const ShaderProgram_ShaderType ShaderProgram::ShaderType_MAX;
const int ShaderProgram::ShaderType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ShaderProgram_Shader::kTypeFieldNumber;
const int ShaderProgram_Shader::kPathFieldNumber;
#endif  // !_MSC_VER

ShaderProgram_Shader::ShaderProgram_Shader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderProgram_Shader::InitAsDefaultInstance() {
}

ShaderProgram_Shader::ShaderProgram_Shader(const ShaderProgram_Shader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderProgram_Shader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderProgram_Shader::~ShaderProgram_Shader() {
  SharedDtor();
}

void ShaderProgram_Shader::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ShaderProgram_Shader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderProgram_Shader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_Shader_descriptor_;
}

const ShaderProgram_Shader& ShaderProgram_Shader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderProgram_Shader* ShaderProgram_Shader::default_instance_ = NULL;

ShaderProgram_Shader* ShaderProgram_Shader::New() const {
  return new ShaderProgram_Shader;
}

void ShaderProgram_Shader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderProgram_Shader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protobuf.ShaderProgram.ShaderType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::ShaderProgram_ShaderType_IsValid(value)) {
            set_type(static_cast< ::protobuf::ShaderProgram_ShaderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderProgram_Shader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protobuf.ShaderProgram.ShaderType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderProgram_Shader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protobuf.ShaderProgram.ShaderType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderProgram_Shader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protobuf.ShaderProgram.ShaderType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderProgram_Shader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderProgram_Shader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderProgram_Shader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderProgram_Shader::MergeFrom(const ShaderProgram_Shader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderProgram_Shader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderProgram_Shader::CopyFrom(const ShaderProgram_Shader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProgram_Shader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShaderProgram_Shader::Swap(ShaderProgram_Shader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderProgram_Shader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderProgram_Shader_descriptor_;
  metadata.reflection = ShaderProgram_Shader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShaderProgram::kShadersFieldNumber;
#endif  // !_MSC_VER

ShaderProgram::ShaderProgram()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShaderProgram::InitAsDefaultInstance() {
}

ShaderProgram::ShaderProgram(const ShaderProgram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShaderProgram::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShaderProgram::~ShaderProgram() {
  SharedDtor();
}

void ShaderProgram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShaderProgram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShaderProgram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShaderProgram_descriptor_;
}

const ShaderProgram& ShaderProgram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShaderProgram_2eproto();
  return *default_instance_;
}

ShaderProgram* ShaderProgram::default_instance_ = NULL;

ShaderProgram* ShaderProgram::New() const {
  return new ShaderProgram;
}

void ShaderProgram::Clear() {
  shaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShaderProgram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.ShaderProgram.Shader shaders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shaders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShaderProgram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  for (int i = 0; i < this->shaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shaders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShaderProgram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  for (int i = 0; i < this->shaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shaders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShaderProgram::ByteSize() const {
  int total_size = 0;

  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  total_size += 1 * this->shaders_size();
  for (int i = 0; i < this->shaders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shaders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShaderProgram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShaderProgram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShaderProgram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShaderProgram::MergeFrom(const ShaderProgram& from) {
  GOOGLE_CHECK_NE(&from, this);
  shaders_.MergeFrom(from.shaders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShaderProgram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShaderProgram::CopyFrom(const ShaderProgram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShaderProgram::IsInitialized() const {

  for (int i = 0; i < shaders_size(); i++) {
    if (!this->shaders(i).IsInitialized()) return false;
  }
  return true;
}

void ShaderProgram::Swap(ShaderProgram* other) {
  if (other != this) {
    shaders_.Swap(&other->shaders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShaderProgram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShaderProgram_descriptor_;
  metadata.reflection = ShaderProgram_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
#ifdef _MSC_VER
#  pragma warning(pop)
#endif
