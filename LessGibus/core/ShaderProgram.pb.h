// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShaderProgram.proto

#ifndef PROTOBUF_ShaderProgram_2eproto__INCLUDED
#define PROTOBUF_ShaderProgram_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Declarations.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ShaderProgram_2eproto();
void protobuf_AssignDesc_ShaderProgram_2eproto();
void protobuf_ShutdownFile_ShaderProgram_2eproto();

class ShaderProgram;
class ShaderProgram_Shader;

enum ShaderProgram_ShaderType {
  ShaderProgram_ShaderType_COMPUTE_SHADER = 1,
  ShaderProgram_ShaderType_VERTEX_SHADER = 2,
  ShaderProgram_ShaderType_TESS_CONTROL_SHADER = 3,
  ShaderProgram_ShaderType_TESS_EVALUATION_SHADER = 4,
  ShaderProgram_ShaderType_GEOMETRY_SHADER = 5,
  ShaderProgram_ShaderType_FRAGMENT_SHADER = 6
};
bool ShaderProgram_ShaderType_IsValid(int value);
const ShaderProgram_ShaderType ShaderProgram_ShaderType_ShaderType_MIN = ShaderProgram_ShaderType_COMPUTE_SHADER;
const ShaderProgram_ShaderType ShaderProgram_ShaderType_ShaderType_MAX = ShaderProgram_ShaderType_FRAGMENT_SHADER;
const int ShaderProgram_ShaderType_ShaderType_ARRAYSIZE = ShaderProgram_ShaderType_ShaderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShaderProgram_ShaderType_descriptor();
inline const ::std::string& ShaderProgram_ShaderType_Name(ShaderProgram_ShaderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShaderProgram_ShaderType_descriptor(), value);
}
inline bool ShaderProgram_ShaderType_Parse(
    const ::std::string& name, ShaderProgram_ShaderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShaderProgram_ShaderType>(
    ShaderProgram_ShaderType_descriptor(), name, value);
}
// ===================================================================

class ShaderProgram_Shader : public ::google::protobuf::Message {
 public:
  ShaderProgram_Shader();
  virtual ~ShaderProgram_Shader();

  ShaderProgram_Shader(const ShaderProgram_Shader& from);

  inline ShaderProgram_Shader& operator=(const ShaderProgram_Shader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShaderProgram_Shader& default_instance();

  void Swap(ShaderProgram_Shader* other);

  // implements Message ----------------------------------------------

  ShaderProgram_Shader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShaderProgram_Shader& from);
  void MergeFrom(const ShaderProgram_Shader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protobuf.ShaderProgram.ShaderType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::protobuf::ShaderProgram_ShaderType type() const;
  inline void set_type(::protobuf::ShaderProgram_ShaderType value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:protobuf.ShaderProgram.Shader)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ShaderProgram_2eproto();
  friend void protobuf_AssignDesc_ShaderProgram_2eproto();
  friend void protobuf_ShutdownFile_ShaderProgram_2eproto();

  void InitAsDefaultInstance();
  static ShaderProgram_Shader* default_instance_;
};
// -------------------------------------------------------------------

class ShaderProgram : public ::google::protobuf::Message {
 public:
  ShaderProgram();
  virtual ~ShaderProgram();

  ShaderProgram(const ShaderProgram& from);

  inline ShaderProgram& operator=(const ShaderProgram& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShaderProgram& default_instance();

  void Swap(ShaderProgram* other);

  // implements Message ----------------------------------------------

  ShaderProgram* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShaderProgram& from);
  void MergeFrom(const ShaderProgram& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ShaderProgram_Shader Shader;

  typedef ShaderProgram_ShaderType ShaderType;
  static const ShaderType COMPUTE_SHADER = ShaderProgram_ShaderType_COMPUTE_SHADER;
  static const ShaderType VERTEX_SHADER = ShaderProgram_ShaderType_VERTEX_SHADER;
  static const ShaderType TESS_CONTROL_SHADER = ShaderProgram_ShaderType_TESS_CONTROL_SHADER;
  static const ShaderType TESS_EVALUATION_SHADER = ShaderProgram_ShaderType_TESS_EVALUATION_SHADER;
  static const ShaderType GEOMETRY_SHADER = ShaderProgram_ShaderType_GEOMETRY_SHADER;
  static const ShaderType FRAGMENT_SHADER = ShaderProgram_ShaderType_FRAGMENT_SHADER;
  static inline bool ShaderType_IsValid(int value) {
    return ShaderProgram_ShaderType_IsValid(value);
  }
  static const ShaderType ShaderType_MIN =
    ShaderProgram_ShaderType_ShaderType_MIN;
  static const ShaderType ShaderType_MAX =
    ShaderProgram_ShaderType_ShaderType_MAX;
  static const int ShaderType_ARRAYSIZE =
    ShaderProgram_ShaderType_ShaderType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShaderType_descriptor() {
    return ShaderProgram_ShaderType_descriptor();
  }
  static inline const ::std::string& ShaderType_Name(ShaderType value) {
    return ShaderProgram_ShaderType_Name(value);
  }
  static inline bool ShaderType_Parse(const ::std::string& name,
      ShaderType* value) {
    return ShaderProgram_ShaderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .protobuf.ShaderProgram.Shader shaders = 1;
  inline int shaders_size() const;
  inline void clear_shaders();
  static const int kShadersFieldNumber = 1;
  inline const ::protobuf::ShaderProgram_Shader& shaders(int index) const;
  inline ::protobuf::ShaderProgram_Shader* mutable_shaders(int index);
  inline ::protobuf::ShaderProgram_Shader* add_shaders();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf::ShaderProgram_Shader >&
      shaders() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf::ShaderProgram_Shader >*
      mutable_shaders();

  // required .protobuf.VertexDeclaration vertex_format = 2;
  inline bool has_vertex_format() const;
  inline void clear_vertex_format();
  static const int kVertexFormatFieldNumber = 2;
  inline const ::protobuf::VertexDeclaration& vertex_format() const;
  inline ::protobuf::VertexDeclaration* mutable_vertex_format();
  inline ::protobuf::VertexDeclaration* release_vertex_format();
  inline void set_allocated_vertex_format(::protobuf::VertexDeclaration* vertex_format);

  // @@protoc_insertion_point(class_scope:protobuf.ShaderProgram)
 private:
  inline void set_has_vertex_format();
  inline void clear_has_vertex_format();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf::ShaderProgram_Shader > shaders_;
  ::protobuf::VertexDeclaration* vertex_format_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ShaderProgram_2eproto();
  friend void protobuf_AssignDesc_ShaderProgram_2eproto();
  friend void protobuf_ShutdownFile_ShaderProgram_2eproto();

  void InitAsDefaultInstance();
  static ShaderProgram* default_instance_;
};
// ===================================================================


// ===================================================================

// ShaderProgram_Shader

// required .protobuf.ShaderProgram.ShaderType type = 1;
inline bool ShaderProgram_Shader::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShaderProgram_Shader::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShaderProgram_Shader::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShaderProgram_Shader::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::protobuf::ShaderProgram_ShaderType ShaderProgram_Shader::type() const {
  return static_cast< ::protobuf::ShaderProgram_ShaderType >(type_);
}
inline void ShaderProgram_Shader::set_type(::protobuf::ShaderProgram_ShaderType value) {
  assert(::protobuf::ShaderProgram_ShaderType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string path = 2;
inline bool ShaderProgram_Shader::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShaderProgram_Shader::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShaderProgram_Shader::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShaderProgram_Shader::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ShaderProgram_Shader::path() const {
  return *path_;
}
inline void ShaderProgram_Shader::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ShaderProgram_Shader::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ShaderProgram_Shader::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShaderProgram_Shader::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ShaderProgram_Shader::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ShaderProgram_Shader::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ShaderProgram

// repeated .protobuf.ShaderProgram.Shader shaders = 1;
inline int ShaderProgram::shaders_size() const {
  return shaders_.size();
}
inline void ShaderProgram::clear_shaders() {
  shaders_.Clear();
}
inline const ::protobuf::ShaderProgram_Shader& ShaderProgram::shaders(int index) const {
  return shaders_.Get(index);
}
inline ::protobuf::ShaderProgram_Shader* ShaderProgram::mutable_shaders(int index) {
  return shaders_.Mutable(index);
}
inline ::protobuf::ShaderProgram_Shader* ShaderProgram::add_shaders() {
  return shaders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf::ShaderProgram_Shader >&
ShaderProgram::shaders() const {
  return shaders_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf::ShaderProgram_Shader >*
ShaderProgram::mutable_shaders() {
  return &shaders_;
}

// required .protobuf.VertexDeclaration vertex_format = 2;
inline bool ShaderProgram::has_vertex_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShaderProgram::set_has_vertex_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShaderProgram::clear_has_vertex_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShaderProgram::clear_vertex_format() {
  if (vertex_format_ != NULL) vertex_format_->::protobuf::VertexDeclaration::Clear();
  clear_has_vertex_format();
}
inline const ::protobuf::VertexDeclaration& ShaderProgram::vertex_format() const {
  return vertex_format_ != NULL ? *vertex_format_ : *default_instance_->vertex_format_;
}
inline ::protobuf::VertexDeclaration* ShaderProgram::mutable_vertex_format() {
  set_has_vertex_format();
  if (vertex_format_ == NULL) vertex_format_ = new ::protobuf::VertexDeclaration;
  return vertex_format_;
}
inline ::protobuf::VertexDeclaration* ShaderProgram::release_vertex_format() {
  clear_has_vertex_format();
  ::protobuf::VertexDeclaration* temp = vertex_format_;
  vertex_format_ = NULL;
  return temp;
}
inline void ShaderProgram::set_allocated_vertex_format(::protobuf::VertexDeclaration* vertex_format) {
  delete vertex_format_;
  vertex_format_ = vertex_format;
  if (vertex_format) {
    set_has_vertex_format();
  } else {
    clear_has_vertex_format();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf::ShaderProgram_ShaderType>() {
  return ::protobuf::ShaderProgram_ShaderType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ShaderProgram_2eproto__INCLUDED
